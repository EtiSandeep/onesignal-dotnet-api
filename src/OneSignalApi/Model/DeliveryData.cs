/*
 * OneSignal
 *
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@onesignal.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OneSignalApi.Client.OpenAPIDateConverter;

namespace OneSignalApi.Model
{
    /// <summary>
    /// DeliveryData
    /// </summary>
    [DataContract(Name = "DeliveryData")]
    public partial class DeliveryData : IEquatable<DeliveryData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryData" /> class.
        /// </summary>
        /// <param name="successful">successful.</param>
        /// <param name="failed">failed.</param>
        /// <param name="errored">errored.</param>
        /// <param name="converted">converted.</param>
        /// <param name="received">received.</param>
        public DeliveryData(int? successful = default(int?), int? failed = default(int?), int? errored = default(int?), int? converted = default(int?), int? received = default(int?))
        {
            this.Successful = successful;
            this.Failed = failed;
            this.Errored = errored;
            this.Converted = converted;
            this.Received = received;
        }

        /// <summary>
        /// Gets or Sets Successful
        /// </summary>
        [DataMember(Name = "successful", EmitDefaultValue = true)]
        public int? Successful { get; set; }

        /// <summary>
        /// Gets or Sets Failed
        /// </summary>
        [DataMember(Name = "failed", EmitDefaultValue = true)]
        public int? Failed { get; set; }

        /// <summary>
        /// Gets or Sets Errored
        /// </summary>
        [DataMember(Name = "errored", EmitDefaultValue = true)]
        public int? Errored { get; set; }

        /// <summary>
        /// Gets or Sets Converted
        /// </summary>
        [DataMember(Name = "converted", EmitDefaultValue = true)]
        public int? Converted { get; set; }

        /// <summary>
        /// Gets or Sets Received
        /// </summary>
        [DataMember(Name = "received", EmitDefaultValue = true)]
        public int? Received { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeliveryData {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Errored: ").Append(Errored).Append("\n");
            sb.Append("  Converted: ").Append(Converted).Append("\n");
            sb.Append("  Received: ").Append(Received).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeliveryData);
        }

        /// <summary>
        /// Returns true if DeliveryData instances are equal
        /// </summary>
        /// <param name="input">Instance of DeliveryData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeliveryData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.Failed == input.Failed ||
                    (this.Failed != null &&
                    this.Failed.Equals(input.Failed))
                ) && 
                (
                    this.Errored == input.Errored ||
                    (this.Errored != null &&
                    this.Errored.Equals(input.Errored))
                ) && 
                (
                    this.Converted == input.Converted ||
                    (this.Converted != null &&
                    this.Converted.Equals(input.Converted))
                ) && 
                (
                    this.Received == input.Received ||
                    (this.Received != null &&
                    this.Received.Equals(input.Received))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                {
                    hashCode = (hashCode * 59) + this.Successful.GetHashCode();
                }
                if (this.Failed != null)
                {
                    hashCode = (hashCode * 59) + this.Failed.GetHashCode();
                }
                if (this.Errored != null)
                {
                    hashCode = (hashCode * 59) + this.Errored.GetHashCode();
                }
                if (this.Converted != null)
                {
                    hashCode = (hashCode * 59) + this.Converted.GetHashCode();
                }
                if (this.Received != null)
                {
                    hashCode = (hashCode * 59) + this.Received.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
